#include "game_actions.h"
#include "protogen.h"

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>

using namespace Protogen;
//Used to modify the message XXX { ... of the proto file : if there is only args or output, don't append _args/_output at the end
//each game_action use 2 consecutive index in each stringstream, to separate arguments and output
std::vector<std::string> proto_top;
std::vector<std::string> proto_content;


/* Content is generated like that :
1. message XXX
.....
2. content of message
....
3. modify first line, add _args or _output if needed, else append just {\n
4. append everything in one file

*/
void Protogen::generate_content() {
	std::stringstream cur_stream;
	int i = 1;
	#define X(action_name, function, ARGUMENTS, OUTPUT) \
			cur_stream.str(""); \
			cur_stream.clear(); \
			i = 1; \
			proto_top.push_back(std::string("message ") + std::string(#action_name) + "_args {\n"); \
			ARGUMENTS \
			cur_stream << "}\n\n"; \
			proto_content.push_back(cur_stream.str()); \
			cur_stream.str(""); \
			cur_stream.clear(); \
			i = 1; \
			proto_top.push_back("message " + std::string(#action_name) + "_out {\n"); \
			OUTPUT \
			cur_stream << "}\n\n"; \
			proto_content.push_back(cur_stream.str()); \

	#define X_FLOAT_ARGS(x) cur_stream << "float " << # x << " = " << i << ";\n"; i++;
	#define X_INT_ARGS(x) cur_stream << "int32 " << # x << " = " << i << ";\n"; i++;
	#define X_BOOL_ARGS(x) cur_stream << "bool " << # x << " = " << i << ";\n"; i++;
	#define X_STR_ARGS(x) cur_stream << "string " << # x << " = " << i << ";\n"; i++;
	#define X_FLOAT_OUTPUT(x) cur_stream << "float " << # x << " = " << i << ";\n"; i++;
	#define X_INT_OUTPUT(x) cur_stream << "int32 " << # x << " = " << i << ";\n"; i++;
	#define X_BOOL_OUTPUT(x) cur_stream << "bool " << # x << " = " << i << ";\n"; i++;

	DEFINE_GAME_ACTION_FUNCTIONS
	#undef X
	#undef X_FLOAT_ARGS
	#undef X_INT_ARGS
	#undef X_BOOL_ARGS
	#undef X_FLOAT_OUTPUT
	#undef X_INT_OUTPUT
	#undef X_BOOL_OUTPUT
	
}


void Protogen::generate_proto() {
	generate_content();
	std::string full_path = std::string(__FILE__) + std::string("\\..\\..\\proto\\game_actions.proto");
	std::ofstream proto_file(full_path);
	proto_file << "//Generated by protogen executable in ecal_lua \n\n";
	proto_file << "syntax = \"proto3\";\n";
	proto_file << "package game_actions;\n\n";
	for (int i = 0; i < proto_top.size(); i++)
	{
		proto_file << proto_top[i];
		proto_file << proto_content[i];
	}
	proto_file.close();
}

int main(int argc, char** argv)
{
	Protogen::generate_proto();
}